
// Need to add changes here

function ConvertTMToEllipticCurves(N, C, sol, CurvesFile, RCurvesFile)
    ECs:= [];
    for s in sol do
        u:= s[1];
        v:= s[2];

        R<x,y>:= PolynomialRing(Integers(),2);
        a:= C[1];
        b:= C[2];
        c:= C[3];
        d:= C[4];
	F:= C[1]*x^3 + C[2]*x^2*y + C[3]*x*y^2 + C[4]*y^3;
	DF:= -27*C[1]^2*C[4]^2 + C[2]^2*C[3]^2 + 18*C[1]*C[2]*C[3]*C[4] - 4*C[1]*C[3]^3 - 4*C[2]^3*C[4];

	beta0:= Valuation(DF,3);

        H:= (b^2-3*a*c)*x^2 + (b*c-9*a*d)*x*y + (c^2-3*b*d)*y^2;
        G:= (-27*a^2*d + 9*a*b*c-2*b^3)*x^3 + (-3*b^2*c - 27*a*b*d + 18*a*c^2)*x^2*y + (3*b*c^2 - 18*b^2*d + 27*a*c*d)*x*y^2 + (-9*b*c*d + 2*c^3 + 27*a*d^2)*y^3;

        Fac1:= [f[1] : f in Factorization(N)];
        //Fac1:= [2,3,23];
        N_0:= [q : q in Fac1 | (q ne 2) and (q ne 3)];
        if IsSquarefree(N) eq true then
            curly_D:= [1,2];
        else
            curly_D:= Divisors( (2^3)*(3^2)*&*N_0 );
        end if;
        //curly_D:= [1,2];    // if N squarefree
PP<x,y,z>:=ProjectiveSpace(Rationals(),2);
C:=Curve(PP,x^3+3*y^3-11*z^3);
P0:=C![2,1,1];
E, phi:=EllipticCurve(C,P0);
Em, psi:= MinimalModel(E);
        for D in curly_D do
            //a_4:= -27*D^2*(Evaluate(H,[u,v]));
            //a_6:= 27*D^3*(Evaluate(G,[u,v]));
            a_4:= -3*D^2*(Evaluate(H,[u,v]));
            a_6:= D^3*(Evaluate(G,[u,v]));

            E:= [0,0,0, a_4, a_6];

            MinE:= MinimalModel(EllipticCurve(E));
            CondE:= Conductor(MinE);
            Append(~ECs, < CondE, cInvariants(MinE), [u,v] >);

            TwistE:= QuadraticTwist(MinE,-1);
            TwistMinE:= MinimalModel(EllipticCurve(TwistE));
            TwistCondE:= Conductor(TwistMinE);
            Append(~ECs, < TwistCondE, cInvariants(TwistMinE), [u,v] >);


        end for;
    end for;
    Sort(~ECs);

    fprintf CurvesFile, "Curves corresponding to potential conductor N:= %o, and form C:=%o \n ", N, C;
    fprintf CurvesFile, "=========================================================================== \n";
    PrintFile(CurvesFile, ECs);

    for e in ECs do
        if e[1] eq N then
            fprintf RCurvesFile, "Relevant curves corresponding to conductor N = %o and form C:=%o \n ", N, C;
            fprintf RCurvesFile, "=========================================================================== \n";
            PrintFile(RCurvesFile, e);
        end if;
    end for;

    return ECs;
end function;
