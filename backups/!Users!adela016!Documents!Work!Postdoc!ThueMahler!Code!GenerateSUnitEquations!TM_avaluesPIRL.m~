/*
TM_avaluesPIRL.m

Author: Adela Gherga <adelagherga@gmail.com>
Copyright Â© 2021, Adela Gherga, all rights reserved.
Created: 22 July 2021

Description:

Commentary:

To do list:

Example:

*/

prep0:= function(set)

    /*
     Description: convert bash input into magma integers, sets, and perform general
                  setup and assumption tests
     Input: set:= bash input in the format
                  N,"form","optimal form","min poly","partial obstructions",
                  class number,r,no ideal eq,no Thue eq,"a values","primelist"
     Output: hash:= text to be output in LogFile in the event of errors in the format
                    N,"form","optimal form"
             f:= monic polynomial defining the number field K = Q(th)
             clist:= [c_0, \dots, c_n], the coefficients of F(X,Y)
             classnumber:= class number of the relevant number field K = Q(th)
             r:= number of fundamental units in K
             NoIdealEq:= number of ideal equations to be solved
             NoThueEq:= number of Thue equations to be solved
             avalues:= [a_1, \dots, a_m], fixed coefficients on RHS of F(X,Y)
             primelist:= [p_1, \dots, p_v], rational primes on RHS of F(X,Y)
     Example:
   */

    CommaSplit:= Split(set,","); // split bash input by ","
    RBracketSplit:= Split(set,"()"); // split bash input by "(" and ")"

    // delimiter for form
    assert CommaSplit[2][2] eq "(" and CommaSplit[5][#CommaSplit[5]-1] eq ")";
    // delimiter for optimal form
    assert CommaSplit[6][2] eq "(" and CommaSplit[9][#CommaSplit[9]-1] eq ")";
    // delimiter for min poly
    assert CommaSplit[10][2] eq "(" and CommaSplit[13][#CommaSplit[13]-1] eq ")";
    assert (#RBracketSplit eq 11) or (#RBracketSplit eq 13);

    N:= StringToInteger(CommaSplit[1]); // convert bash input N into an integer
    hash:= CommaSplit[1] cat ","; // set hash as first element of .csv row, N

    // convert bash input for optimal form, min poly into a sequence of integers
    clist:= [StringToInteger(i) : i in Split(RBracketSplit[4],",")];
    fclist:= [StringToInteger(i) : i in Split(RBracketSplit[6],",")];

    if (#RBracketSplit eq 11) then
	assert CommaSplit[14] eq "None";
	partialObstruction:= [];
	classnumber:= StringToInteger(CommaSplit[15]);
	r:= StringToInteger(CommaSplit[16]);
	NoIdealEq:= StringToInteger(CommaSplit[17]);
	NoThueEq:= StringToInteger(CommaSplit[18]);
	avalues:= [StringToInteger(i) : i in Split(RBracketSplit[8],",")];
	primelist:= [StringToInteger(i) : i in Split(RBracketSplit[10],",")];
    else
	partialObstruction:= [StringToInteger(i) : i in Split(RBracketSplit[8],",")];
	classnumber:= StringToInteger(Split(RBracketSplit[9],",")[2]);
	r:= StringToInteger(Split(RBracketSplit[9],",")[3]);
	NoIdealEq:= StringToInteger(Split(RBracketSplit[9],",")[4]);
	NoThueEq:= StringToInteger(Split(RBracketSplit[9],",")[5]);
	avalues:= [StringToInteger(i) : i in Split(RBracketSplit[10],",")];
	primelist:= [StringToInteger(i) : i in Split(RBracketSplit[12],",")];
    end if;
    Sort(~partialObstruction);
    assert (r eq 1) or (r eq 2);

    // add original form, clist to hash in .csv format
    hash:= hash cat "\"(" cat RBracketSplit[2] cat ")\"," cat
	   "\"(" cat RBracketSplit[4] cat ")\"";
    assert hash eq &cat[set[i] : i in [1..#hash]];

    QUV<U,V>:=PolynomialRing(Rationals(),2);
    Qx<x>:= PolynomialRing(Rationals());

    // general setup for Thue-Mahler solver
    assert &and[c in Integers() : c in clist];
    c0:=Integers()!clist[1];
    assert c0 ne 0;
    assert &and[IsPrime(p) : p in primelist];
    assert &and[a ne 0 : a in avalues];
    assert &and[GCD(a,p) eq 1 : a in avalues, p in primelist];
    n:=#clist-1;
    assert n eq 3;

    // generate the relevant Thue-Mahler polynomial
    F:=&+[clist[i+1]*U^(n-i)*V^i : i in [0..n]];
    assert IsHomogeneous(F);
    DiscF:= -27*clist[1]^2*clist[4]^2 + clist[2]^2*clist[3]^2;
    DiscF:= DiscF + 18*clist[1]*clist[2]*clist[3]*clist[4];
    DiscF:= DiscF - 4*clist[1]*clist[3]^3 - 4*clist[2]^3*clist[4];
    assert DiscF eq Discriminant(Evaluate(F,[x,1]));

    assert fclist eq ([1] cat [clist[i+1]*c0^(i-1) : i in [1..n]]);
    f:=&+[fclist[i+1]*x^(n-i) : i in [0..n]];
    c0:= Integers()!fclist[1]; // update c0
    assert c0 eq 1;
    assert IsMonic(f);
    assert Coefficients(f) eq
	   Coefficients(clist[1]^(n-1)*Evaluate(F,[x/clist[1],1]));
    assert Degree(f) eq n;
    assert IsIrreducible(f);
    assert &and[c in Integers() : c in Coefficients(f)];

    assert &and[p notin partialObstruction : p in primelist];
    assert &and[N mod p eq 0 : p in primelist | (p ne 3) and (p ne 2)];

    return hash,f,clist,classnumber,r,NoIdealEq,NoThueEq,avalues,primelist;
end function;

refinePIRL:= function(Lp,Mp,fprs)

    /*
     Description: refine and remove redundancy from Algorithm 3.3.3 and 3.3.4 of Gh
     		  for a given p, applying this algorithm only to the primelist and not
		  the avalues
     Input: Lp:= the set Lp as in Algorithms 3.3.3 and 3.3.4 of Gh
     	    	 displayed as [[#fprs+1],aaa], where #fprs+1 indicates no unbounded prime
                 and aaa[i] is the exponent on the prime ideal fprs[i] in the ideal b
            Mp:= the set Mp as in Algorithms 3.3.3 and 3.3.4 of Gh
            	 displayed as [[k],aaa], where k indicates the unbounded prime ideal
                 and aaa[i] is the exponent on the prime ideal fprs[i] in the ideal b
            fprs:= prime ideals in K above p
     Output: Lp:= the refined set Lp as in Algorithms 3.3.3 and 3.3.4 of Gh
     	     	  displayed as [[#fprs+1],aaa], where #fprs+1 indicates no unbounded prime
                  and aaa[i] is the exponent on the prime ideal fprs[i] in the ideal b
             Mp:= the refined set Mp as in Algorithms 3.3.3 and 3.3.4 of Gh
     Example:
   */

    // set aaa[k] = 0 for each [[k],aaa] in Mp and remove subsequently identical cases
    for i in [1..#Mp] do
        pr1:= Mp[i];
        k:= pr1[1][1];
        Mp[i][2][k]:= 0;
    end for;
    MpNew:= [];
    for i in [1..#Mp] do
	if Mp[i] notin MpNew then
	    Append(~MpNew,Mp[i]);
	end if;
    end for;
    Mp:= MpNew;

    // remove redundancy; that is, remove cases of Lp covered by Mp
    toRemove:= [];
    for i in [1..#Lp] do
	fb:=&*[fprs[j]^Lp[i][2][j] : j in [1..#fprs]];
	for j in [1..#Mp] do
	    fb_:=&*[fprs[k]^Mp[j][2][k] : k in [1..#fprs]];
	    fp:=fprs[Mp[j][1][1]];
	    if IsIntegral(fb/fb_) and (fb/fb_ eq fp^(Valuation(fb/fb_,fp))) then
		if (Valuation(fb/fb_,fp) ge 0) then
		    Append(~toRemove,i);
		    break j;
		end if;
	    end if;
	end for;
    end for;
    LpNew:= [Lp[i] : i in [1..#Lp] | i notin toRemove];
    Lp:= LpNew;

    return Lp, Mp;
end function;

algs1and2:= function(fieldKinfo,p)

    /*
     Description: application of Algorithm 3.3.3 and 3.3.4 of Gh
     Input: fieldKinfo:= record of the field K = Q(th)
            p:= rational prime used as in Lemma 3.3.1 and 3.3.2 of Gh
     Output: Lp:= the set Lp as in Algorithms 3.3.3 and 3.3.4 of Gh
                  displayed as [[#fprs+1],aaa], where #fprs+1 indicates no unbounded prime
                  and aaa[i] is the exponent on the prime ideal fprs[i] in the ideal b
             Mp:= the set Mp as in Algorithms 3.3.3 and 3.3.4 of Gh
                  displayed as [[k],aaa], where k indicates the unbounded prime ideal
                  and aaa[i] is the exponent on the prime ideal fprs[i] in the ideal b
             fprs:= prime ideals in K above p
     Example:
   */

    K:=fieldKinfo`field;
    th:= K.1;
    OK:=fieldKinfo`ringofintegers;
    f:= fieldKinfo`minpoly;
    fprs:=Factorisation(p*OK);
    fprs:=[fact[1] : fact in fprs]; // generate all prime ideals above p

    prec:=10*(Valuation(Discriminant(f),p)+1);
    Zp:=pAdicRing(p,prec);
    rts:=Roots(f,Zp);
    rts:=[Integers()!r[1] : r in rts]; // generate all Zp-roots of f(t,1)
    Lp:=[];
    Mp:=[];

    // apply Algorithm 3.3.3 of Gh
    t:=1;
    ulist:=[w : w in [0..(p-1)]];
    while #ulist ne 0 do
        ulistNew:=[];
        for u in ulist do
	    // determine indices of prime ideals satisfying criteria of P_u of Algorithm 3.3.3
            cPu:=[i : i in [1..#fprs] | Valuation((u-th)*OK,fprs[i]) ge
					t*RamificationDegree(fprs[i])];
	    // determine all exponents in b_u of Algorithm 3.3.3
            fbu:= [ Min([Valuation((u-th)*OK,fprs[i]),
			 t*RamificationDegree(fprs[i])]) : i in [1..#fprs]];
            assert &*[fprs[i]^fbu[i] : i in [1..#fprs]] eq p^t*OK+(u-th)*OK;
	    // set index k of unbounded prime to #fprs + 1 to indicate no
	    // unbounded prime ideals
            k:= #fprs + 1;
            if #cPu eq 0 then
                if [[k],fbu] notin Lp then
                    Append(~Lp, [[k],fbu]);
                end if;
            elif #cPu eq 1 then
                fp:=fprs[cPu[1]]; // determine corresponding prime ideal of P_u
                efp:=RamificationDegree(fp)*InertiaDegree(fp);
                rtcount:=#[alpha : alpha in rts | Valuation(u-alpha,p) ge t];
		// verify conditions for membership in set M_p
                if (efp eq 1) and (rtcount ge 1) then
                    if [[cPu[1]],fbu] notin Mp then
			// set index k of unbounded prime to P_u[1]
                        Append(~Mp, [[cPu[1]],fbu]);
                    end if;
                else
                    ulistNew:=ulist cat [ u+p^(t)*w : w in [0..(p-1)]];
                end if;
            else
                ulistNew:=ulist cat [ u+p^(t)*w : w in [0..(p-1)]];
            end if;
        end for;
        ulist:=ulistNew;
        t:=t+1;
    end while; // end of Algorithm 3.3.3

    // apply Algorithm 3.3.4 of Gh
    // c0 = 1, so that Valuation(c0,p) = 1 by default
    ulist:=[p*w : w in [0..(p-1)]];
    t:=2;
    while #ulist ne 0 do
        ulistNew:=[];
        for u in ulist do
	    // determine indices of prime ideals satisfying criteria of P_u of Algorithm 3.3.4
            cPu:=[i : i in [1..#fprs] | Valuation(1-u*th,fprs[i]) ge
					t*RamificationDegree(fprs[i])];
	    // determine all exponents in b_u of Algorithm 3.3.4
            fbu:= [ Min([Valuation(1-u*th,fprs[i]),
			 t*RamificationDegree(fprs[i])]) : i in [1..#fprs]];
            assert &*[fprs[i]^fbu[i] : i in [1..#fprs]] eq (1-u*th)*OK+p^t*OK;
	    // set index k of unbounded prime to #fprs + 1 to indicate no
	    // unbounded prime ideals
            k:= #fprs + 1;
            if #cPu eq 0 then
                if [[k],fbu] notin Lp then
                    Append(~Lp, [[k],fbu]);
                end if;
            else
                ulistNew:=ulistNew cat [u+p^(t)*w : w in [0..(p-1)]];
            end if;
        end for;
        ulist:=ulistNew;
        t:=t+1;
    end while; // end of Algorithm 3.3.4

    return Lp,Mp,fprs;
end function;

monic:= function(fieldKinfo,clist,avalues,primelist)

    /*
     Description: Reduce F(X,Y) = a_i p_1^(z_1) \cdots p_v^(z_v) to a
                  monic equation via a change of variables and output the new corresponding
                  a values (c_d), along with [a,u_d,d] as in Section 3.1 of Gh
     Input: fieldKinfo:= record of the field K = Q(th)
            clist:= [c_0, \dots, c_n], the coefficients of F(X,Y)
            avalues:= [a_1, \dots, a_m], fixed coefficients on RHS of F(X,Y)
            primelist:= [p_1, \dots, p_v], rational primes on RHS of F(X,Y)
     Output: alistNew:= list of records of all c_d (newa) values with all corresponding
                        [a,u_d,d] values as in Section 3.1 of Gh
     Example:
   */

    assert &and[IsPrime(p) : p in primelist];
    assert &and[c in Integers() : c in clist];
    assert &and[a ne 0 : a in avalues];
    c0:=Integers()!clist[1];
    assert c0 ne 0;
    n:=#clist-1;
    assert n ge 3;

    // generate the relevant Thue Mahler polynomial
    QUV<U,V>:=PolynomialRing(Rationals(),2);
    F:=&+[clist[i+1]*U^(n-i)*V^i : i in [0..n]];
    assert IsHomogeneous(F);

    // generate the corresponding monic polynomial f(x,y)
    Qx<x>:= PolynomialRing(Rationals());
    fclist:= [1] cat [clist[i+1]*c0^(i-1) : i in [1..n]];
    f:=&+[fclist[i+1]*x^(n-i) : i in [0..n]];
    assert f eq fieldKinfo`minpoly;

    aRec:= recformat<newa,adu>;
    alist:= [];
    for a in avalues do
	// generate the prime factors of a
	afactors:= [q[1] : q in Factorization(a)];
	// generate the possible exponents on these primes appearing in gcd(a,Y)
	if IsEmpty(afactors) then
            product1:= [1];
	else
            exponents1:=[
	    [0..Min(Valuation(a,afactors[i]),Valuation(c0,afactors[i]))] :
	    i in [1..#afactors]];
            product1:= [];
	    // determine all possible combinations for primes of a appearing in gcd(a,Y)
            expCombos1:= CartesianProduct(exponents1);
            for c in expCombos1 do
		Append(~product1, &*{afactors[i]^c[i] : i in [1..#afactors]});
            end for;
	end if;

	// generate the possible exponents on the primes of primelist appearing in gcd(a,Y)
	exponents2:= [[0..Valuation(c0,primelist[i])] : i in [1..#primelist]];
	assert IsEmpty(exponents2) eq false;
	product2:= [];
	expCombos2:= CartesianProduct(exponents2);
	for c in expCombos2 do
            Append(~product2, &*{primelist[i]^c[i] : i in [1..#primelist]});
	end for;
	assert IsEmpty(product2) eq false;

	// generate the set of all positive integers m dividing c0
	// such that ord_p(m) <= ord_p(a) for each prime notin primelist
	// this is the set D in Section 3.1 of Gh
	curlyD:= [];
	for c in product1, d in product2 do
            if c*d notin curlyD then
		Append(~curlyD, c*d);
            end if;
	end for;
	Sort(~curlyD);

	// generate all possible values of gcd(a,Y) and corresponding new value of a
	// this information is used to write F(X,Y) as a monic equation
	duc:= [];
	for d in curlyD do
            u:= (c0^(n-1))/d^n;
            c:= Sign(u*a)*u*a/&*[p^Valuation(u*a, p) : p in primelist];
            assert &and[Valuation(c,p) eq 0 : p in primelist];
            assert c in Integers();
            f0:= u*Evaluate(F,[d*U/c0, V*d]);
            f:= Evaluate(f0,[x,1]);
	    assert f eq fieldKinfo`minpoly;
            Append(~duc, [d,u,Integers()!c]);
	end for;

	// remove redundancy and store the relevant data in a record
	// that is, store only the unique values of a and all corresponding values of u,d
	ducCopy:= duc;
	for dset in duc do
	    if dset in ducCopy then
		c:= dset[3];
		temp:= rec< aRec |newa:= c, adu:=[]>;
		for dset2 in ducCopy do
		    c2:= dset2[3];
		    if (c eq c2) then
			Append(~temp`adu,[a,dset2[1],dset2[2]]);
			Exclude(~ducCopy,dset2);
		    end if;
		end for;
		Append(~alist, temp);
	    end if;
	end for;
	assert IsEmpty(ducCopy);
    end for;

    // remove redundancy across new a values by consolidating all corresponding a,d,u values
    alistIndex:= [1..#alist];
    alistNew:= [];
    for i in [1..#alist] do
	if i in alistIndex then
	    c:= alist[i]`newa;
	    temp:= rec< aRec | newa:=c, adu:=[] >;
	    for j in alistIndex do
		c2:= alist[j]`newa;
		if (c eq c2) then
		    temp`adu:= temp`adu cat alist[j]`adu;
		    Exclude(~alistIndex, j);
		end if;
	    end for;
	    Append(~alistNew, temp);
	end if;
    end for;
    assert IsEmpty(alistIndex);

    return alistNew;
end function;

normInv:= function(fieldKinfo,R)

    /*
     Description: generate all ideals of OK having norm R, conforming to
     		  Algorithms 3.3.3 and 3.3.4 of Gh
     Input: R:= a positive integer
            OK:= corresponding ring of integers of the field K
     Output: all ideals of OK having norm R as per Algorithms 3.3.3 and 3.3.4, displayed
     	     in an enumerated set
     Example:
   */

    OK:= fieldKinfo`ringofintegers;
    assert R in Integers();
    assert R ge 1;
    R:=Integers()!R;
    assert R ge 1;
    if R eq 1 then
	return { 1*OK };
    end if;
    p:= Max(PrimeDivisors(R));
    ideals:= [];

    // apply Algorithm 3.3.3 and Algorithm 3.3.4 of Gh to p
    Lp,Mp,fprs:=algs1and2(fieldKinfo,p);

    for j in [1..#Lp] do
	assert (Lp[j][1][1] eq #fprs + 1);
	fb:=&*[fprs[k]^Lp[j][2][k] : k in [1..#fprs]];
	if Valuation(Norm(fb),p) eq Valuation(R,p) then
	    Append(~ideals,fb);
	end if;
    end for;
    for j in [1..#Mp] do
	assert (Mp[j][1][1] lt #fprs + 1);
	fb:=&*[fprs[k]^Mp[j][2][k] : k in [1..#fprs]];
	while Valuation(Norm(fb),p) le Valuation(R,p) do
	    if Valuation(Norm(fb),p) eq Valuation(R,p) then
		Append(~ideals,fb);
		break;
	    else
		fb:= fb*fprs[Mp[j][1][1]];
	    end if;
	end while;
    end for;
    if IsEmpty(ideals) then
	return {};
    else
	return &join{{fp*fa : fa in $$(fieldKinfo, R div Norm(fp))} : fp in ideals };
    end if;
end function;

removeThue:= procedure(~afplist,NoIdealEq,NoThueEq,primelist)

    /*
     Description: remvove ideal equations which can be solved via (previously stored)
                  Thue equations
     Input: afplist:= [aset,caseprimes,ideal_a,prime_ideal_list] where
                      ideal_a and prime_ideal_list are as in (3.8) of Gh
            NoIdealEq:= number of ideal equations to be solved
            NoThueEq:= number of Thue equations to be solved
            primelist:= [p_1, \dots, p_v], rational primes on RHS of F(X,Y)
     Output: afplist:= [aset,caseprimes,ideal_a,prime_ideal_list] where
                       ideal_a and prime_ideal_list are as in (3.8) of Gh, and
                       prime_ideal_list is non-empty
     Example:
   */

    ThueToSolve:= [];
    v:= #primelist;

    // remove ideal equations which have exponent 0 on all prime ideals by generating
    // corresponding Thue equations to be solved
    toRemove:= [];
    for i in [1..#afplist] do
	fplist:= afplist[i][4];
	if IsEmpty(fplist) then
	    a:= afplist[i][1]`newa;
	    aduset:= afplist[i][1]`adu;
	    ideal_a:= afplist[i][3];
	    tt:= [Valuation(Norm(ideal_a), primelist[i]) : i in [1..v]];
	    assert Norm(ideal_a) eq Abs(a)*&*[primelist[i]^tt[i] : i in [1..v]];
	    tf,alpha:=IsPrincipal(ideal_a); // verify ideal_a is principal
	    if tf then
		for adu in aduset do
		    zz:= [tt[i] - Valuation(adu[3]*adu[1],primelist[i]) : i in [1..v]];
		    rhs:= Integers()! adu[1]*&*[primelist[i]^zz[i] : i in [1..v]];
		    assert adu[3]*rhs eq Integers()!a*&*[primelist[i]^tt[i] : i in [1..v]];
		    // store Thue equations to be solved
		    if (rhs in Integers()) and (rhs notin ThueToSolve) then
			Append(~ThueToSolve, rhs);
		    end if;
		end for;
	    end if;
	    Append(~toRemove,i);
	end if;
    end for;
    Sort(~ThueToSolve);

    // remove cases covered by Thue solver
    afplistNew:= [afplist[i] : i in [1..#afplist] | i notin toRemove];
    afplist:= afplistNew;
    assert #afplist le NoIdealEq;
    assert IsEmpty(afplist) eq false;
    assert #ThueToSolve le NoThueEq;

end procedure;

prep1:= function(fieldKinfo,clist,NoIdealEq,NoThueEq,avalues,primelist)

    /*
     Description: generate all ideal equations (3.8) of Gh for each set of primes and
     		  corresponding a values
     Input: fieldKinfo:= record of the field K = Q(th)
            clist:= [c_0, \dots, c_n], the coefficients of F(X,Y)
	    NoIdealEq:= number of ideal equations to be solved
            NoThueEq:= number of Thue equations to be solved
            avalues:= [a_1, \dots, a_m], fixed coefficients on RHS of F(X,Y)
            primelist:= [p_1, \dots, p_v], rational primes on RHS of F(X,Y)
     Output: afplist:= [aset,caseprimes,ideal_a,prime_ideal_list] where
                       ideal_a and prime_ideal_list are as in (3.8) of Gh
             avalues:= [a_1, \dots, a_m], fixed coefficients on RHS of F(X,Y), updated based
	     	       on refinements from Algorithms 3.3.3 and 3.3.4 of Gh applied to avalues
     Example:
   */

    assert &and[IsPrime(p) : p in primelist];
    assert &and[c in Integers() : c in clist];
    assert &and[a ne 0 : a in avalues];
    assert &and[GCD(a,p) eq 1 : a in avalues, p in primelist];
    n:=#clist-1;
    assert n ge 3;

    OK:= fieldKinfo`ringofintegers;
    f:= fieldKinfo`minpoly;
    fclist:= [Coefficient(f,i) : i in [n..0 by -1]];
    c0:= Integers()!fclist[1];
    assert c0 eq 1;

    afplist:=[* [* 1*OK, [] *] *];
    for p in primelist do
	// apply Algorithm 3.3.3 and Algorithm 3.3.4 of Gh
        Lp0,Mp0,fprs:=algs1and2(fieldKinfo,p);
	// refine and remove redundancy of Algorithms 3.3.3 and 3.3.4 of Gh
	Lp,Mp:= refinePIRL(Lp0,Mp0,fprs);
	// determine all possible combinations of prime ideals as arising from Lp, Mp
	afplistNew1:=[*
		      [*pr[1]*&*[fprs[i]^fb[2][i] : i in [1..#fprs]], pr[2]*]:
		      fb in Lp, pr in afplist  *];
	afplistNew2:=[* [* pr[1]*&*[fprs[i]^qr[2][i] :
				    i in [1..#fprs]], pr[2] cat fprs[qr[1]] *] :
		      qr in Mp, pr in afplist  *];
	afplist:=afplistNew1 cat afplistNew2;
    end for;

    // for each a in avalues, generate all new values of a after applying monic
    // linear transformation
    alist:= monic(fieldKinfo,clist,avalues,primelist);

    afplistNew:=[* *];
    avaluesNew:= []; // store updated list of avalues
    for aset in alist do
	a:= Integers()!aset`newa;
	invs:= normInv(fieldKinfo,a); // generate all ideals of norm a
	if (IsEmpty(invs) eq false) then
	    for adu in aset`adu do
		if adu[1] notin avaluesNew then
		    Append(~avaluesNew,adu[1]);
		end if;
	    end for;
	end if;
	for pr in afplist do
            af:=pr[1];
	    fplist:= pr[2];
	    caseprimes:= [Norm(fp) : fp in fplist];
            assert GCD(Norm(af),a) eq 1;
            assert &and[Valuation(a,p) eq 0 : p in primelist];
	    assert &and[p in primelist : p in caseprimes];
	    assert #Set(caseprimes) eq #caseprimes; // verify prime ideals are coprime
	    // verify prime ideals have correct norms
            assert Set(caseprimes) subset Set(primelist);
	    // for each aset and corresponding primelist, generate the ideal a
	    // and prime ideal list as in (3.8) of Gh
            afplistNew:= afplistNew cat [*[*aset,caseprimes,af*I,pr[2]*] : I in invs *];
        end for;
    end for;
    afplist:=afplistNew;

    // sanity checks
    for pr in afplist do
        a:=pr[1]`newa; // new_a value
	ideal_a:= pr[3];
        fplist:=pr[4];
        assert &and[InertiaDegree(fq)*RamificationDegree(fq) eq 1: fq in fplist];
	assert IsDivisibleBy(Integers()!Norm(ideal_a),a);
	tt:= [Valuation(Norm(ideal_a), primelist[i]) : i in [1..#primelist]];
	assert Integers()!Norm(ideal_a) eq Abs(a)*&*[primelist[i]^tt[i] :
						     i in [1..#primelist]];
        assert Set(PrimeDivisors(Integers()!Norm(ideal_a) div Integers()!a))
		  subset Set(primelist);
    end for;

    removeThue(~afplist,NoIdealEq,NoThueEq,primelist);
    assert Set(avaluesNew) subset Set(avalues);
    assert IsEmpty(afplist) eq false;

    // LEFT OFF HERE- should we remove the last assertion? can this ever fail?

    return afplist,avaluesNew;
end function;
