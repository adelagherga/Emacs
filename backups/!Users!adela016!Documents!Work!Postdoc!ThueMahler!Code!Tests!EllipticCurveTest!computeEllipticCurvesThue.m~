sets:=
["500006,\"(13,14,19,4)\",\"(13,14,19,4)\",\"(38462,84501014)\"",
"500007,\"(3,25,-40,-2)\",\"(3,25,-40,-2)\",\"(166669,500007,1333352,4000056,4500063,13500189,36000504,108001512)\"",
"500008,\"(2,23,-12,-16)\",\"(3,40,-29,2)\",\"(125002)\"",
"500008,\"(2,15,-28,-25)\",\"(7,-129,-92,-16)\",\"(125002)\"",
"500008,\"(6,1,-22,-4)\",\"(19,-2,-19,6)\",\"(250004)\"",
"500008,\"(7,8,-33,2)\",\"(7,8,-33,2)\",\"(125002)\"",
"500008,\"(2,2,37,45)\",\"(3,-206,81,-8)\",\"(250004)\"",
"500008,\"(1,13,21,137)\",\"(1,13,21,137)\",\"(62501,125002)\"",
"500008,\"(16,1,20,-8)\",\"(2,377,160,17)\",\"(62501,125002)\"",
"500008,\"(4,9,-26,4)\",\"(101,-49,-34,-4)\",\"(250004)\"",
"500008,\"(4,14,-13,-9)\",\"(11,-67,-34,-4)\",\"(250004)\"",
"500008,\"(4,6,-23,-4)\",\"(11,-49,-30,-4)\",\"(250004)\"",
"500008,\"(2,10,-1,32)\",\"(37,-49,-20,-2)\",\"(125002,250004)\"",
"500010,\"(3,24,-7,-16)\",\"(3,24,-7,-16)\",\"(1000020)\"",
"500011,\"(7,9,34,44)\",\"(7,9,34,44)\",\"(500011,4000088)\"",
"500012,\"(3,16,11,78)\",\"(3,16,11,78)\",\"(125003)\"",
"500012,\"(17,21,31,23)\",\"(4,40,30,17)\",\"(250006)\"",
"500012,\"(4,20,36,91)\",\"(4,20,36,91)\",\"(250006)\"",
"500012,\"(4,4,30,71)\",\"(4,4,30,71)\",\"(250006)\"",
"500013,\"(6,36,6,-13)\",\"(2,96,72,13)\",\"(6173,18519,49384,148152)\"",
"500016,\"(12,5,18,3)\",\"(3,-18,5,-12)\",\"(62502)\"",
"500016,\"(10,4,14,5)\",\"(11,-55,31,-5)\",\"(31251,62502)\"",
"500016,\"(5,4,28,20)\",\"(9,35,11,5)\",\"(10417,20834,31251,62502,281259,562518,843777,1687554,7593993,15187986,22781979,45563958)\"",
"500018,\"(2,7,26,118)\",\"(2,7,26,118)\",\"(250009,500018,2000072,4000144)\"",
"500019,\"(6,9,-46,9)\",\"(1,-62,45,-6)\",\"(500019,4000152)\"",
"500019,\"(18,17,26,9)\",\"(9,-26,17,-18)\",\"(500019,4000152,13500513,108004104)\"",
"500021,\"(3,7,-51,-17)\",\"(17,-51,-7,3)\",\"(500021,4000168)\"",
"500024,\"(13,3,14,10)\",\"(13,3,14,10)\",\"(250012)\"",
"500025,\"(1,7,-39,-15)\",\"(1,7,-39,-15)\",\"(100005,800040)\"",
"500025,\"(3,15,16,18)\",\"(3,15,16,18)\",\"(20001,160008)\""];

for set in sets do

    CommaSplit:=Split(set,","); // Split bash input by ",".
    RBracketSplit:=Split(set,"()"); // Split bash input by "(" and ")".
    // Delimiter for form.
    assert CommaSplit[2][2] eq "(" and CommaSplit[5][#CommaSplit[5]-1] eq ")";
    // Delimiter for optimal form.
    assert CommaSplit[6][2] eq "(" and CommaSplit[9][#CommaSplit[9]-1] eq ")";
    assert (#RBracketSplit eq 7);
    N:=StringToInteger(CommaSplit[1]);
    // Convert bash input for optimal form, min poly into a sequence of integers.
    alist:=[StringToInteger(i) : i in Split(RBracketSplit[4],",")];
    rhsList:=[StringToInteger(i) : i in Split(RBracketSplit[6],",")];

    SetLogFile("test.txt");
    assert &and[a_i in Integers() : a_i in alist];
    a0:=Integers()!alist[1];
    assert a0 ne 0;
    d:=#alist-1;
    assert d ge 3;
    ZUV<U,V>:=PolynomialRing(Integers(),2);
    Zx<x>:=PolynomialRing(Integers());
    F:=&+[alist[i+1]*U^(d-i)*V^i : i in [0..d]];
    assert IsHomogeneous(F);
    ThueF:=Thue(Evaluate(F,[x,1]));
    for rhs in rhsList do
	time sols:=Solutions(ThueF,rhsList[1]);
	ECs:=convertTMToEllipticCurves(N,alist,sols);
	printf "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";
	printf "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";
	printf "N:=%o; alist:=%o; rhs:=%o; \n",N,alist,rhs;
	print ECs;
	for E in ECs do
	    assert E[1] eq N;
	    fprintf "outtest.m", "%o, %o, %o, %o, %o\n",N,E[2],alist,rhs,E[3];
	end for;
    end for;
end for;
